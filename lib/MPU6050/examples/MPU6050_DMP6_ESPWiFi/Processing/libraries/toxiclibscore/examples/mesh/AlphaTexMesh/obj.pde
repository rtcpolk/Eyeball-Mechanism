public class OBJWriter {

  public final String VERSION = "0.3";

  protected OutputStream objStream;
  protected PrintWriter objWriter;

  protected int numVerticesWritten = 0;
  protected int numNormalsWritten = 0;
  protected int numUVsWritten = 0;

  public void beginSave(OutputStream stream) {
    try {
      objStream = stream;
      handleBeginSave();
    } 
    catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void beginSave(String fn) {

    try {
      objStream = new FileOutputStream(fn);
      handleBeginSave();
    } 
    catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void endSave() {
    try {
      objWriter.flush();
      objWriter.close();
      objStream.flush();
      objStream.close();
    } 
    catch (IOException e) {
      e.printStackTrace();
    }
  }

  public void addMaterialFile(String filename) {
    objWriter.println("mtllib " + filename);
  }

  public void face(int a, int b, int c) {
    objWriter.println("f " + a + " " + b + " " + c);
  }

  public void faceList() {
    objWriter.println("s off");
  }

  public void faceWithNormals(int a, int b, int c, int na, int nb, int nc) {
    objWriter.println("f " + a + "//" + na + " " + b + "//" + nb + " " + c + "//" + nc);
  }

  public void faceWithNormalsAndUVs(int a, int b, int c, int na, int nb, int nc, int uv1, int uv2, int uv3) {
    objWriter.println("f " + a + "/" + uv1 + "/" + na + " " + b + "/" + uv2 + "/" + nb + " " + c
      + "/" + uv3 + "/" + nc);
  }

  public void faceWithUVs(int a, int b, int c, int uv1, int uv2, int uv3) {
    objWriter.println("f " + a + "/" + uv1 + " " + b + "/" + uv2 + " " + c + "/" + uv3);
  }

  public int getCurrNormalOffset() {
    return numNormalsWritten;
  }

  public int getCurrVertexOffset() {
    return numVerticesWritten;
  }

  public int getCurrUVOffset() {
    return numUVsWritten;
  }

  protected void handleBeginSave() {
    objWriter = new PrintWriter(objStream);
    objWriter.println("# generated by OBJExport v" + VERSION);
    numVerticesWritten = 0;
    numNormalsWritten = 0;
    numUVsWritten = 0;
  }

  public void newObject(String name) {
    objWriter.println("o " + name);
  }

  public void normal(Vec3D n) {
    objWriter.println("vn " + n.x + " " + n.y + " " + n.z);
    numNormalsWritten++;
  }

  public void vertex(Vec3D v) {
    objWriter.println("v " + v.x + " " + v.y + " " + v.z);
    numVerticesWritten++;
  }

  public void uv(Vec2D uv, boolean flipV) {
    objWriter.println("vt " + uv.x + " " + (flipV ? 1-uv.y : uv.y));
  }
}

